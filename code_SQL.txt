p1_1 - CREATE SCHEMA LibraryManagement;p1_2 - CREATE TABLE authors (               author_id INT AUTO_INCREMENT PRIMARY KEY,               author_name VARCHAR(255) );p1_3 - CREATE TABLE genres (               genre_id INT AUTO_INCREMENT PRIMARY KEY,               genre_name VARCHAR(255) );p1_4 - CREATE TABLE books (               book_id INT AUTO_INCREMENT PRIMARY KEY,               title VARCHAR(255),               publication_year YEAR,                author_id INT,                genre_id INT,                FOREIGN KEY (author_id) REFERENCES authors(author_id),               FOREIGN KEY (genre_id) REFERENCES genres(genre_id) );p1_5 - CREATE TABLE users (               user_id INT AUTO_INCREMENT PRIMARY KEY,               username VARCHAR(255),               email VARCHAR(255) );p1_6 - CREATE TABLE borrowed_books (               borrow_id INT AUTO_INCREMENT PRIMARY KEY,               book_id INT, user_id INT,               borrow_date DATE,               return_date DATE,               FOREIGN KEY (book_id) REFERENCES books(book_id),               FOREIGN KEY (user_id) REFERENCES users(user_id) );p2_1,2,3,4,5,61) INSERT INTO authors (author_name) VALUES ('Author 1'), ('Author 2');2) INSERT INTO genres (genre_name) VALUES ('Genre 1'), ('Genre 2');3)  INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Book 1', 2020, 1, 1),('Book 2', 2021, 2, 2);4) INSERT INTO users (username, email) VALUES ('User1', 'user1@example.com'), ('User2', 'user2@example.com');5) INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (1, 1, '2024-06-01', '2024-06-10'), (2, 2, '2024-06-05', '2024-06-15');P3_1 - SELECT *              FROM order_details              INNER JOIN orders ON order_details.order_id = orders.id              INNER JOIN customers ON orders.customer_id = customers.id              INNER JOIN products ON order_details.product_id = products.id              INNER JOIN categories ON products.category_id = categories.id              INNER JOIN shippers ON orders.shipper_id = shippers.id              INNER JOIN suppliers ON products.supplier_id = suppliers.id;p4_1 - SELECT COUNT(*)              FROM order_details              INNER JOIN orders ON order_details.order_id = orders.id              INNER JOIN customers ON orders.customer_id = customers.id              INNER JOIN products ON order_details.product_id = products.id              INNER JOIN categories ON products.category_id = categories.id              INNER JOIN shippers ON orders.shipper_id = shippers.id              INNER JOIN suppliers ON products.supplier_id = suppliers.id;p4_2 - SELECT COUNT(*)              FROM order_details              LEFT JOIN orders ON order_details.order_id = orders.id             LEFT JOIN customers ON orders.customer_id = customers.id             LEFT JOIN products ON order_details.product_id = products.id             LEFT JOIN categories ON products.category_id = categories.id             LEFT JOIN shippers ON orders.shipper_id = shippers.id             LEFT JOIN suppliers ON products.supplier_id = suppliers.id;p4_3 - SELECT              COUNT(order_details.id)FROM             order_details             INNER JOIN orders ON orders.id = order_details.order_id             INNER JOIN customers ON customers.id = orders.customer_id             INNER JOIN employees ON employees.employee_id = orders.employee_id             INNER JOIN shippers ON shippers.id = orders.shipper_id             INNER JOIN products ON products.id = order_details.product_id             INNER JOIN suppliers ON suppliers.id = products.supplier_id             INNER JOIN categories ON categories.id = products.category_idWHERE            employees.employee_id > 3            AND employees.employee_id <= 10;p4_4 - SELECT             categories.name AS category_name,             COUNT(*) AS row_count,            AVG(order_details.quantity) AS avg_quantityFROM           order_details          INNER JOIN orders ON orders.id = order_details.order_id          INNER JOIN customers ON customers.id = orders.customer_id          INNER JOIN employees ON employees.employee_id = orders.employee_id          INNER JOIN shippers ON shippers.id = orders.shipper_id         INNER JOIN products ON products.id = order_details.product_id         INNER JOIN suppliers ON suppliers.id = products.supplier_id         INNER JOIN categories ON categories.id = products.category_idGROUP BY         categories.name;p4_5 - SELECT               categories.name AS category_name,               COUNT(*) AS row_count,               AVG(order_details.quantity) AS avg_quantityFROM              order_details             INNER JOIN orders ON orders.id = order_details.order_id             INNER JOIN customers ON customers.id = orders.customer_id             INNER JOIN employees ON employees.employee_id = orders.employee_id             INNER JOIN shippers ON shippers.id = orders.shipper_id             INNER JOIN products ON products.id = order_details.product_id             INNER JOIN suppliers ON suppliers.id = products.supplier_id             INNER JOIN categories ON categories.id = products.category_idGROUP BY             categories.nameHAVING             AVG(order_details.quantity) > 21;p4_6 - SELECT               categories.name AS category_name,               COUNT(*) AS row_count,               AVG(order_details.quantity) AS avg_quantityFROM              order_details             INNER JOIN orders ON orders.id = order_details.order_id             INNER JOIN customers ON customers.id = orders.customer_id             INNER JOIN employees ON employees.employee_id = orders.employee_id             INNER JOIN shippers ON shippers.id = orders.shipper_id             INNER JOIN products ON products.id = order_details.product_id             INNER JOIN suppliers ON suppliers.id = products.supplier_id             INNER JOIN categories ON categories.id = products.category_idGROUP BY             categories.nameHAVING             AVG(order_details.quantity) > 21ORDER BY             row_count DESC;p4_7 - SELECT               categories.name AS category_name,               COUNT(*) AS row_count,               AVG(order_details.quantity) AS avg_quantityFROM              order_details             INNER JOIN orders ON orders.id = order_details.order_id             INNER JOIN customers ON customers.id = orders.customer_id             INNER JOIN employees ON employees.employee_id = orders.employee_id             INNER JOIN shippers ON shippers.id = orders.shipper_id             INNER JOIN products ON products.id = order_details.product_id             INNER JOIN suppliers ON suppliers.id = products.supplier_id            INNER JOIN categories ON categories.id = products.category_idGROUP BY           categories.nameLIMIT 4 OFFSET 1;